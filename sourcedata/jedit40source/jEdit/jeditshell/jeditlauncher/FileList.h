/*
 * FileList.h - part of jEditLauncher package
 * Copyright (C) 2001 John Gellene
 * jgellene@nyc.rr.com
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or any later version.
 *
 * Notwithstanding the terms of the General Public License, the author grants
 * permission to compile and link object code generated by the compilation of
 * this program with object code and libraries that are not subject to the
 * GNU General Public License, provided that the executable output of such
 * compilation shall be distributed with source code on substantially the
 * same basis as the jEditLauncher package of which this program is a part.
 * By way of example, a distribution would satisfy this condition if it
 * included a working makefile for any freely available make utility that
 * runs on the Windows family of operating systems. This condition does not
 * require a licensee of this software to distribute any proprietary software
 * (including header files and libraries) that is licensed under terms
 * prohibiting redistribution to third parties.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 *
 * $Id: FileList.h,v 1.1 2001/07/30 16:00:40 jgellene Exp $
 */

// FileList.h: Definition of the file list classes

#if !defined(__FILELIST_H__)
#define __FILELIST_H__

#include "stdafx.h"

class ServerConnection;
class ScriptWriter;
interface IScriptServer;

interface IFileList
{
	virtual HRESULT Process(IScriptServer* pServer) = 0;
};

class FileListImpl : public IFileList
{
public:
	FileListImpl(ScriptWriter *pWriter);
	virtual ~FileListImpl();
protected:
	ScriptWriter* GetWriter();
	HRESULT SendToServer(char* szBuf, IScriptServer* pServer);
	char** GetData(char** ppData, int numArgs);
	wchar_t** GetData(wchar_t** ppData, int numArgs);
	void DeleteData(char** ppData);
	void DeleteData(wchar_t** ppData);

private:
	ScriptWriter *m_pWriter;

private:
	FileListImpl(const ScriptWriter&);
	FileListImpl& operator=(const ScriptWriter&);
};


class SimpleFileList : public FileListImpl
{
public:
	SimpleFileList(ScriptWriter* pWriter, char **argv, int numArgs);
	virtual ~SimpleFileList();
	virtual HRESULT Process(IScriptServer* pServer);
private:
	char ** m_ppArgs;
	int m_nArgs;
private:
	SimpleFileList(const SimpleFileList&);
	SimpleFileList& operator=(const SimpleFileList&);
};

class SimpleFilePair : public FileListImpl
{
public:
	SimpleFilePair(ScriptWriter* pWriter, char* arg1, char* arg2);
	virtual ~SimpleFilePair();
	virtual HRESULT Process(IScriptServer* pServer);
private:
	FileListImpl *m_pImpl;
private:
	SimpleFilePair(const SimpleFilePair&);
	SimpleFilePair& operator=(const SimpleFilePair&);
};

class WideFilePair : public FileListImpl
{
public:
	WideFilePair(ScriptWriter* pWriter, wchar_t* arg1, wchar_t* arg2);
	virtual ~WideFilePair();
	virtual HRESULT Process(IScriptServer* pServer);
private:
	FileListImpl *m_pImpl;
private:
	WideFilePair(const WideFilePair&);
	WideFilePair& operator=(const WideFilePair&);
};


class WideFileList : public FileListImpl
{
public:
	WideFileList(ScriptWriter* pWriter, wchar_t **argv, int numArgs);
	virtual ~WideFileList();
	virtual HRESULT Process(IScriptServer* pServer);
private:
	wchar_t ** m_ppArgs;
	int m_nArgs;
private:
	WideFileList(const WideFileList&);
	WideFileList& operator=(const WideFileList&);
};

class VariantFileList : public FileListImpl
{
public:
	VariantFileList(ScriptWriter *pWriter, VARIANTARG &var);
	virtual ~VariantFileList();
	virtual HRESULT Process(IScriptServer* pServer);
private:
	VARIANTARG m_var;
private:
	VariantFileList(const VariantFileList&);
	VariantFileList& operator=(const VariantFileList&);
};

class BeanShellFileList : public FileListImpl
{
public:
	BeanShellFileList(char* pszScript, bool isFile);
	BeanShellFileList(wchar_t* pwszScript, bool isFile);
	virtual ~BeanShellFileList();
	virtual HRESULT Process(IScriptServer* pServer);
private:
	char* m_pszScript;
	bool m_bIsFile;
	bool m_bOwnPtr;
private:
	BeanShellFileList(const BeanShellFileList&);
	BeanShellFileList& operator=(const BeanShellFileList);
};


#endif        //  #if !defined(__FILELIST_H__)

