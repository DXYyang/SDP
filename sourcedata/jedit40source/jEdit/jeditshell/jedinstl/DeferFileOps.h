/*
 * DeferFileOps.h - part of jEditLauncher package
 * Copyright (C) 2001 John Gellene
 * jgellene@nyc.rr.com
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or any later version.
 *
 * Notwithstanding the terms of the General Public License, the author grants
 * permission to compile and link object code generated by the compilation of
 * this program with object code and libraries that are not subject to the
 * GNU General Public License, provided that the executable output of such
 * compilation shall be distributed with source code on substantially the
 * same basis as the jEditLauncher package of which this program is a part.
 * By way of example, a distribution would satisfy this condition if it
 * included a working makefile for any freely available make utility that
 * runs on the Windows family of operating systems. This condition does not
 * require a licensee of this software to distribute any proprietary software
 * (including header files and libraries) that is licensed under terms
 * prohibiting redistribution to third parties.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 *
 * $Id: DeferFileOps.h,v 1.1.1.1 2001/07/03 13:14:12 jgellene Exp $
 */

interface DeferFileOps
{
	virtual HRESULT Read() = 0;
	virtual HRESULT Add(const TCHAR* szDest, const TCHAR* szSource) = 0;
	virtual HRESULT Write() = 0;
};


class DeferFileOpsImpl : public DeferFileOps
{
	/* constructor */
protected:
	DeferFileOpsImpl();
	virtual ~DeferFileOpsImpl();

	LPVOID GetBuffer();
	size_t Size();
	LPVOID InitBuffer(size_t t);

	LPVOID lpBuffer;
	size_t size;

	/* no copy constructor */
private:
	DeferFileOpsImpl( const DeferFileOpsImpl&);
	DeferFileOpsImpl& operator=( const DeferFileOpsImpl&);
};


class DeferFileOps95 : public DeferFileOpsImpl
{
	/* constructor */
public:
	DeferFileOps95();
	virtual ~DeferFileOps95();

	/* Overrides */
	virtual HRESULT Read();
	virtual HRESULT Add(const TCHAR* szDest, const TCHAR* szSource);
	virtual HRESULT Write();

	/* Implementation */
private:

	/* no copy constructor */
private:
	DeferFileOps95( const DeferFileOps95& );
	DeferFileOps95& operator=( const DeferFileOps95& );
};


/*
 * Note: requires implementation of CString class
 * (either MFC or WTL version will suffice)
 */

class DeferFileOpsNT : public DeferFileOpsImpl
{
	/* constructor */
public:
	DeferFileOpsNT();
	virtual ~DeferFileOpsNT();

	/* Overrides */
	virtual HRESULT Read();
	virtual HRESULT Add(const TCHAR* szDest, const TCHAR* szSource);
	virtual HRESULT Write();

	/* Implementation */
private:
	const CString strSessionManager;
	DWORD dwBufLength;
	const TCHAR *szPrefixSource;
	const TCHAR *szPrefixDest;


	/* no copy constructor */
private:
	DeferFileOpsNT( const DeferFileOpsNT& );
	DeferFileOpsNT& operator=( const DeferFileOpsNT& );
};

