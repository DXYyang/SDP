<?xml version="1.0" encoding="UTF-8"?>
<!--
   ====================================================================
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
   ====================================================================
-->
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V1.1//EN" "../dtd/document-v11.dtd">

<document>
    <header>
        <title>Busy Developers' Guide to HSLF drawing layer</title>
        <authors>
            <person email="yegor@dinom.ru" name="Yegor Kozlov" id="CO"/>
        </authors>
    </header>
    <body>
        <section><title>Busy Developers' Guide to HSLF drawing layer</title>
             <section><title>Index of Features</title>
                <ul>
                    <li><link href="#NewPresentation">How to create a new presentation and add new slides to it</link></li>
                    <li><link href="#PageSize">How to retrieve or change slide size</link></li>
                    <li><link href="#GetShapes">How to get shapes contained in a particular slide</link></li>
                    <li><link href="#Shapes">Drawing a shape on a slide</link></li>
                    <li><link href="#Pictures">How to work with pictures</link></li>
                    <li><link href="#SlideTitle">How to set slide title</link></li>
                    <li><link href="#Fill">How to work with slide/shape background</link></li>
                </ul>
            </section>
            <section><title>Features</title>
                <anchor id="NewPresentation"/>
                <section><title>New Presentation</title>
                  <source>
    //create a new empty slide show
    SlideShow ppt = new SlideShow();

    //add first slide
    Slide s1 = ppt.createSlide();

    //add second slide
    Slide s2 = ppt.createSlide();
    
    //save changes in a file
    FileOutputStream out = new FileOutputStream("slideshow.ppt");
    ppt.write(out);
    out.close();
                 </source>
                </section>
                <anchor id="PageSize"/>
                <section><title>How to retrieve or change slide size</title>
                    <source>
    SlideShow ppt = new SlideShow(new HSLFSlideShow("slideshow.ppt"));
    //retrieve page size. Coordinates are expressed in points (72 dpi)
    java.awt.Dimension pgsize = ppt.getPageSize();
    int pgx = pgsize.width; //slide width
    int pgy = pgsize.height; //slide height

    //set new page size
    ppt.setPageSize(new java.awt.Dimension(1024, 768));
    //save changes 
    FileOutputStream out = new FileOutputStream("slideshow.ppt");
    ppt.write(out);
    out.close();
                  </source>
                </section>
                <anchor id="GetShapes"/>
                <section><title>How to get shapes contained in a particular slide</title>
                  <p>The superclass of all shapes in HSLF is the Shape class - the elemental object that composes a drawing.
                    The following pictute shows the class tree of HSLF shapes:
                  </p>
                  <p>
			  <img src="images/hslf_shapes.gif" alt="Class Tree of HSLF Shapes" width="611" height="412"/>
                  </p>
                  <p>
                    The following fragment demonstrates how to iterate over shapes for each slide.
                  </p>
                    <source>
  SlideShow ppt = new SlideShow(new HSLFSlideShow("slideshow.ppt"));
  //get slides 
  Slide[] slide = ppt.getSlides();
  for (int i = 0; i &lt; slide.length; i++){
    Shape[] sh = slide[i].getShapes();
    for (int j = 0; j &lt; sh.length; j++){
      //name of the shape
      String name = sh[j].getShapeName();

      //shapes's anchor which defines the position of this shape in the slide
      java.awt.Rectangle anchor = sh[j].getAnchor();

      if (sh[j] instanceof Line){
        Line line = (Line)sh[j];
        //work with Line
      } else if (sh[j] instanceof AutoShape){
        AutoShape shape = (AutoShape)sh[j];
        //work with AutoShape
      } else if (sh[j] instanceof TextBox){
        TextBox shape = (TextBox)sh[j];
        //work with TextBox
      } else if (sh[j] instanceof Picture){
        Picture shape = (Picture)sh[j];
        //work with Picture
      }
    }
  }
                  </source>
                </section>
                <anchor id="Shapes"/>
                <section><title>Drawing a shape on a slide</title>
        <warning>
    To work with graphic objects HSLF uses Java2D classes
    that may throw exceptions if graphical environment is not available. In case if graphical environment
    is not available, you must tell Java that you are running in headless mode and
    set the following system property: <code> java.awt.headless=true </code>
    (either via <code>-Djava.awt.headless=true</code> startup parameter or via <code>System.setProperty("java.awt.headless", "true")</code>).
        </warning>
                   <p>
                     When you add a shape, you usually specify the dimensions of the shape and the position
                     of the upper left corner of the bounding box for the shape relative to the upper left
                     corner of the slide. Distances in the drawing layer are measured in points (72 points = 1 inch).
                   </p>
                   <source>
  SlideShow ppt = new SlideShow();

  Slide slide = ppt.createSlide();

  //Line shape
  Line line = new Line();
  line.setAnchor(new java.awt.Rectangle(50, 50, 100, 20));
  line.setLineColor(new Color(0, 128, 0));
  line.setLineStyle(Line.LINE_DOUBLE);
  slide.addShape(line);

  //TextBox
  TextBox txt = new TextBox();
  txt.setText("Hello, World!");
  txt.setAnchor(new java.awt.Rectangle(300, 100, 300, 50));

  //use RichTextRun to work with the text format
  RichTextRun rt = txt.getTextRun().getRichTextRuns()[0];
  rt.setFontSize(32);
  rt.setFontName("Arial");
  rt.setBold(true);
  rt.setItalic(true);
  rt.setUnderlined(true);
  rt.setFontColor(Color.red);
  rt.setAlignment(TextBox.AlignRight);

  slide.addShape(txt);

  //Autoshape
  //32-point star
  AutoShape sh1 = new AutoShape(ShapeTypes.Star32);
  sh1.setAnchor(new java.awt.Rectangle(50, 50, 100, 200));
  sh1.setFillColor(Color.red);
  slide.addShape(sh1);

  //Trapezoid
  AutoShape sh2 = new AutoShape(ShapeTypes.Trapezoid);
  sh2.setAnchor(new java.awt.Rectangle(150, 150, 100, 200));
  sh2.setFillColor(Color.blue);
  slide.addShape(sh2);

  FileOutputStream out = new FileOutputStream("slideshow.ppt");
  ppt.write(out);
  out.close();
                    
                  </source>
                </section>
                <anchor id="Pictures"/>
                <section><title>How to work with pictures</title>
                 
  <p>
  Currently, HSLF API supports the following types of pictures:
  </p>
  <ul>
    <li>Windows Metafiles (WMF)</li>
    <li>Enhanced Metafiles (EMF)</li>
    <li>JPEG Interchange Format</li>
    <li>Portable Network Graphics (PNG)</li>
    <li>Macintosh PICT</li>
  </ul>

                    <source>
  SlideShow ppt = new SlideShow(new HSLFSlideShow("slideshow.ppt"));

  //extract all pictures contained in the presentation
  PictureData[] pdata = ppt.getPictureData();
  for (int i = 0; i &lt; pdata.length; i++){
    PictureData pict = pdata[i];

    // picture data
    byte[] data = pict.getData();

    int type = pict.getType();
    String ext;
    switch (type){
      case Picture.JPEG: ext=".jpg"; break;
      case Picture.PNG: ext=".png"; break;
      case Picture.WMF: ext=".wmf"; break;
      case Picture.EMF: ext=".emf"; break;
      case Picture.PICT: ext=".pict"; break;
      default: continue;
    }
    FileOutputStream out = new FileOutputStream("pict_"+i + ext);
      out.write(data);
      out.close();

  }

  // add a new picture to this slideshow and insert it in a  new slide
  int idx = ppt.addPicture(new File("clock.jpg"), Picture.JPEG);

  Picture pict = new Picture(idx);

  //set image position in the slide
  pict.setAnchor(new java.awt.Rectangle(100, 100, 300, 200));

  Slide slide = ppt.createSlide();
  slide.addShape(pict);

  //now retrieve pictures containes in the first slide and save them on disk
  slide = ppt.getSlides()[0];
  Shape[] sh = slide.getShapes();
  for (int i = 0; i &lt; sh.length; i++){
    if (sh[i] instanceof Picture){
      Picture pict = (Picture)sh[i];
      PictureData pictData = pict.getPictureData();
      byte[] data = pictData.getData();
      int type = pictData.getType();
      if (type == Picture.JPEG){
        FileOutputStream out = new FileOutputStream("slide0_"+i+".jpg");
        out.write(data);
        out.close();
      } else if (type == Picture.PNG){
        FileOutputStream out = new FileOutputStream("slide0_"+i+".png");
        out.write(data);
        out.close();
      }
    }
  }

  FileOutputStream out = new FileOutputStream("slideshow.ppt");
  ppt.write(out);
  out.close();

                    </source>
                </section>
                <anchor id="SlideTitle"/>
                <section><title>How to set slide title</title>
                    <source>
    SlideShow ppt = new SlideShow();
    Slide slide = ppt.createSlide();
    TextBox title = slide.addTitle();
    title.setText("Hello, World!");
    
    //save changes 
    FileOutputStream out = new FileOutputStream("slideshow.ppt");
    ppt.write(out);
    out.close();
                  </source>
                  <p>
                    Below is the equivalent code in PowerPoint VBA:
                  </p>  
                  <source>
    Set myDocument = ActivePresentation.Slides(1)
    myDocument.Shapes.AddTitle.TextFrame.TextRange.Text = "Hello, World!"
                  </source>
                </section>
                <anchor id="Fill"/>
                <section><title>How to modify background of a slide master</title>
                    <source>
        SlideShow ppt = new SlideShow();
        SlideMaster master = ppt.getSlidesMasters()[0];

        Fill fill = master.getBackground().getFill();
        int idx = ppt.addPicture(new File("background.png"), Picture.PNG);
        fill.setFillType(Fill.FILL_PICTURE);
        fill.setPictureData(idx);
                  </source>
                </section>
                <section><title>How to modify background of a slide</title>
                    <source>
        SlideShow ppt = new SlideShow();
        Slide slide = ppt.createSlide();
        
        //This slide has its own background. 
        //Without this line it will use master's background.
        slide.setFollowMasterBackground(false);
        Fill fill = slide.getBackground().getFill();
        int idx = ppt.addPicture(new File("background.png"), Picture.PNG);
        fill.setFillType(Fill.FILL_PATTERN);
        fill.setPictureData(idx);
                  </source>
                </section>
                <section><title>How to modify background of a shape</title>
                    <source>
        SlideShow ppt = new SlideShow();
        Slide slide = ppt.createSlide();
        
        Shape shape = new AutoShape(ShapeTypes.Rectangle);
        shape.setAnchor(new java.awt.Rectangle(100, 100, 200, 200));
        Fill fill = shape.getFill();
        fill.setFillType(Fill.FILL_SHADE);
        fill.setBackgroundColor(Color.red);
        fill.setForegroundColor(Color.green);
        
        slide.addShape(shape);
                  </source>
                </section>
                  
            </section>
        </section>
    </body>
</document>
